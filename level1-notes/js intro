Javascript Overview

JavaScript (JS) is a high-level, interpreted programming language that is primarily used
for creating interactive web pages and web applications.

Why?
We needed a scripting language to work with websites.

Here's a brief history of JavaScript:

Creation at Netscape:
JavaScript was created by Brendan Eich at Netscape Communications in 1995.
Initially called "Mocha" and later renamed to "LiveScript,"
it was developed as a scripting language for Netscape Navigator,
one of the earliest web browsers.

Collaboration with Sun Microsystems:
Netscape collaborated with Sun Microsystems to rename the language "JavaScript" in 1995.
The name change was meant to capitalize on the popularity of Sun's Java programming language.

Standardization by ECMA:
In 1997, Netscape submitted JavaScript to the European Computer Manufacturers Association (ECMA) for standardization.
The standardization process resulted in ECMAScript,
the official name for the JavaScript standard.

and whoever doesnt follow ECMA Standards, the websites will break on those browsers.
Eg: google chrome vs Internet Explorer

ECMAScript Versions: The first edition of ECMAScript, known as ECMAScript 1, was released in 1997. Since then, several versions have been released, each introducing new features and improvements. Notable versions include ECMAScript 3 (1999), ECMAScript 5 (2009), ECMAScript 6 (2015, also known as ES6 or ES2015), ECMAScript 2016, ECMAScript 2017, and ECMAScript 2018.

Growth and Popularity: JavaScript's popularity grew rapidly over the years due to its ability to
enhance the interactivity and user experience of websites. It became a vital component of web development,
enabling developers to build dynamic web applications.

Client-Side and Server-Side: JavaScript was primarily used as a client-side language,
running in web browsers. However, with the introduction of Node.js in 2009, JavaScript
became capable of running on the server-side as well, expanding its areas of application.

Frameworks and Libraries: A vibrant ecosystem of frameworks and libraries emerged around JavaScript, making it easier for developers to build complex applications. Notable frameworks/Libraries include AngularJS, React, and Vue.js, while libraries like jQuery and lodash provided additional functionalities.

Modern JavaScript: ES6 introduced significant enhancements to the language,
including arrow functions, classes, modules, and promises. These additions improved code readability, maintainability,
and productivity for developers.
Modern JavaScript development often involves transpilers like Babel to convert newer syntax into older versions supported by various web browsers.

Web APIs: JavaScript gained access to various Web APIs, enabling developers to interact with different browser features and functionalities. This includes the Document Object Model (DOM) API for manipulating web page content, the XMLHttpRequest API for making asynchronous requests, and the Canvas API for drawing graphics.

JavaScript Beyond the Web: With the rise of technologies like Node.js and Electron,
JavaScript expanded beyond web browsers. It is now used for server-side development,
desktop application development, mobile app development, and even Internet of Things (IoT) devices.

JS ENGINE:

A JavaScript engine is a software component that executes JavaScript code. It is responsible for
interpreting and running JavaScript programs in a browser environment.

Let's dive deeper into how a JavaScript engine works:

Lexical Analysis: The JavaScript engine starts by performing lexical analysis, also known as tokenization.
It scans the JavaScript source code and breaks it down into a sequence of meaningful tokens, such as
keywords, identifiers, operators, and literals.

Parsing: After tokenization, the engine proceeds to parse the tokens and create an Abstract Syntax Tree (AST).
The AST represents the structure and meaning of the code, capturing the relationships between different
elements and their respective operations.

Compilation: Once the AST is constructed, the engine compiles it into an intermediate representation or
bytecode, which is a lower-level, platform-independent representation of the code. This bytecode can
be more efficiently executed by the engine than the original source code.

Optimization: Modern JavaScript engines employ various optimization techniques to improve the performance
of the executed code. These optimizations aim to make the code execute faster and consume fewer resources.
Examples of optimizations include inlining functions, identifying hot paths, and applying just-in-time (JIT) compilation.

Execution: The engine executes the compiled bytecode or performs just-in-time compilation
to convert the bytecode into machine code that can be directly executed by the computer's
processor.

JS for Server side applications:

JS is popular for client side, and what if we can do this for server side?
take the js engine out of the browswer and we call this node js runtime

Node.js is an open-source, server-side JavaScript runtime environment that allows developers
to build scalable and efficient network applications. Here's an overview of how Node.js was created:

The Need for JavaScript on the Server:
JavaScript was traditionally used as a client-side language,
running in web browsers to enhance interactivity on web pages. However, in the mid-2000s, Ryan Dahl,
the creator of Node.js, recognized the limitations of existing server-side technologies and saw an
opportunity to use JavaScript on the server.

Initial Development:
Dahl started experimenting with embedding the Google V8 JavaScript engine, which powers Chrome,
into a standalone C++ program. He aimed to create a lightweight and high-performance runtime environment
that could execute JavaScript code outside the browser.

Release and Growing Community: Node.js was officially released in 2009, and its performance and scalability
attracted attention from developers. It gained popularity as a platform for building real-time web applications,
microservices, and APIs due to its non-blocking, event-driven architecture.

Package Manager (npm): One of the key factors contributing to Node.js' success is npm (Node Package Manager),
which is the default package manager for Node.js. npm provides a vast ecosystem of reusable modules and libraries,
allowing developers to easily share, discover, and install dependencies for their Node.js projects.

IMPORTANT NOTE:

the JavaScript engines used in web browsers and Node.js for server-side JavaScript are different.
Here's an explanation:

Browsers: Web browsers, such as Chrome, Firefox, Safari, and Edge, use their respective JavaScript engines
to execute JavaScript code within the browser environment. For example, Chrome uses the V8 engine,
Firefox uses SpiderMonkey, Safari uses JavaScriptCore, and Edge (since switching to the Chromium base) also uses V8.

Node.js: Node.js, being a server-side JavaScript runtime, utilizes its own JavaScript engine called V8.
The V8 engine, developed by the Chromium project, is open-source and provides high-performance
JavaScript execution. It is the same engine that powers Chrome Borswer, but the version of V8
used by Node.js may differ slightly from the one used in the browser, as they have different
target environments and requirements.

While the underlying V8 engines share a common heritage, they may have some differences and
optimizations specific to their respective environments. Node.js utilizes V8 to execute JavaScript
on the server, allowing developers to leverage the same language and runtime on both the client and
server sides of web development. This enables code sharing, reusability, and consistent programming
patterns between client-side and server-side JavaScript applications.
